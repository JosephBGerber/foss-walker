#![no_std]
#![no_main]

extern crate panic_semihosting;

use cortex_m::{self, interrupt::Mutex};
use cortex_m_rt::entry;
use stm32f4xx_hal as hal;

use crate::hal::{gpio, interrupt, prelude::*, stm32, spi};
use core::cell::RefCell;
use gpio::ExtiPin;
use spi::*;
use embedded_hal::spi::Polarity::IdleLow;
use embedded_hal::spi::Phase::CaptureOnFirstTransition;
use stm32f4xx_hal::time::Hertz;

static USER_INPUT_MUTEX: Mutex<RefCell<Option<gpio::gpioa::PA0<gpio::Input<gpio::Floating>>>>> =
    Mutex::new(RefCell::new(None));
static GREEN_LED_MUTEX: Mutex<RefCell<Option<gpio::gpiod::PD12<gpio::Output<gpio::PushPull>>>>> =
    Mutex::new(RefCell::new(None));

static BYTES: [u8; 3528] =[128, 128, 255, 255, 252, 64, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 64, 255, 255, 241, 0, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 192, 255, 255, 228, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 32, 255, 255, 152, 3, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 160, 255, 246, 32, 2, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 96, 255, 248, 128, 8, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 224, 255, 162, 0, 49, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 16, 255, 200, 0, 199, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 144, 254, 16, 3, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 80, 252, 32, 6, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 208, 248, 0, 24, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 48, 252, 0, 99, 255, 255, 255, 255, 255, 255, 255, 255, 224, 31, 255, 255, 255, 255, 255, 255, 128, 176, 252, 1, 143, 255, 255, 255, 255, 255, 255, 255, 255, 128, 127, 255, 255, 255, 255, 255, 255, 128, 112, 252, 6, 63, 255, 255, 255, 255, 255, 255, 255, 255, 0, 7, 255, 255, 255, 255, 255, 255, 128, 240, 240, 4, 255, 255, 255, 255, 255, 255, 255, 255, 254, 0, 3, 255, 255, 255, 255, 255, 255, 128, 8, 248, 1, 255, 255, 255, 255, 255, 255, 252, 15, 254, 128, 3, 255, 255, 255, 255, 255, 255, 128, 136, 248, 3, 255, 255, 39, 255, 255, 255, 32, 63, 252, 0, 15, 255, 255, 255, 255, 255, 255, 128, 72, 248, 7, 255, 255, 143, 255, 255, 255, 128, 3, 252, 0, 31, 255, 255, 255, 255, 255, 255, 128, 200, 248, 7, 255, 254, 33, 255, 217, 253, 0, 1, 248, 0, 31, 255, 255, 255, 255, 255, 255, 128, 40, 250, 3, 255, 252, 0, 255, 230, 124, 64, 1, 248, 0, 3, 255, 255, 255, 255, 255, 255, 128, 168, 250, 3, 255, 243, 0, 255, 136, 57, 0, 7, 240, 3, 255, 255, 255, 255, 255, 255, 255, 128, 104, 250, 3, 254, 196, 1, 254, 0, 24, 0, 15, 240, 3, 255, 255, 255, 255, 255, 255, 255, 128, 232, 248, 3, 255, 16, 7, 252, 0, 8, 0, 15, 240, 7, 255, 255, 255, 255, 255, 255, 255, 128, 24, 252, 3, 252, 64, 7, 250, 0, 0, 1, 1, 224, 7, 255, 255, 255, 255, 255, 255, 255, 128, 152, 252, 3, 249, 0, 8, 240, 0, 0, 0, 127, 224, 15, 255, 255, 255, 255, 255, 255, 255, 128, 88, 252, 3, 230, 0, 97, 240, 0, 0, 0, 135, 224, 15, 255, 255, 255, 255, 255, 255, 255, 128, 216, 252, 0, 136, 0, 207, 232, 0, 0, 0, 24, 32, 1, 255, 255, 255, 255, 255, 255, 255, 128, 56, 252, 0, 32, 3, 31, 192, 8, 0, 0, 0, 64, 6, 31, 255, 255, 255, 255, 255, 255, 128, 184, 253, 0, 192, 12, 127, 192, 16, 0, 0, 0, 0, 0, 97, 255, 255, 255, 255, 255, 255, 128, 120, 253, 0, 0, 49, 255, 160, 49, 0, 0, 0, 0, 0, 6, 31, 255, 255, 255, 255, 255, 128, 248, 253, 0, 0, 199, 255, 0, 5, 1, 128, 0, 0, 0, 0, 71, 255, 255, 255, 255, 255, 128, 4, 252, 0, 1, 159, 255, 0, 141, 1, 224, 0, 0, 0, 0, 7, 255, 255, 255, 255, 255, 128, 132, 254, 0, 6, 63, 254, 1, 62, 1, 254, 0, 2, 0, 0, 1, 255, 255, 255, 255, 255, 128, 68, 254, 128, 24, 255, 254, 0, 126, 1, 255, 224, 3, 128, 0, 0, 255, 255, 255, 255, 255, 128, 196, 255, 0, 19, 255, 254, 2, 126, 1, 255, 248, 7, 248, 0, 0, 255, 255, 255, 255, 255, 128, 36, 255, 64, 7, 255, 252, 0, 254, 1, 255, 240, 1, 255, 128, 0, 255, 255, 255, 255, 255, 128, 164, 255, 0, 31, 255, 252, 1, 254, 1, 255, 224, 3, 255, 248, 0, 255, 255, 255, 255, 255, 128, 100, 255, 128, 31, 255, 252, 1, 254, 129, 255, 192, 19, 255, 252, 1, 255, 255, 255, 255, 255, 128, 228, 255, 160, 31, 255, 252, 3, 252, 1, 255, 144, 39, 255, 243, 0, 255, 255, 255, 255, 255, 128, 20, 255, 160, 31, 255, 248, 3, 252, 1, 255, 32, 79, 255, 196, 4, 255, 255, 255, 255, 255, 128, 148, 255, 160, 31, 255, 248, 3, 248, 1, 254, 128, 207, 120, 16, 12, 255, 255, 255, 255, 255, 128, 84, 255, 192, 31, 255, 248, 7, 248, 1, 244, 1, 157, 128, 64, 25, 255, 255, 255, 255, 255, 128, 212, 255, 208, 15, 255, 240, 7, 240, 3, 216, 3, 58, 0, 0, 51, 255, 255, 255, 255, 255, 128, 52, 255, 224, 15, 255, 240, 7, 160, 3, 160, 6, 124, 0, 0, 103, 255, 255, 255, 255, 255, 128, 180, 255, 232, 15, 255, 240, 7, 192, 7, 192, 4, 252, 0, 0, 207, 255, 255, 255, 255, 255, 128, 116, 255, 240, 15, 255, 240, 0, 16, 39, 192, 9, 254, 0, 3, 31, 255, 255, 255, 255, 255, 128, 244, 255, 244, 15, 255, 232, 0, 96, 79, 224, 19, 247, 0, 12, 127, 255, 255, 255, 255, 255, 128, 12, 255, 244, 7, 255, 232, 0, 0, 207, 112, 39, 248, 0, 49, 255, 255, 255, 255, 255, 255, 128, 140, 255, 244, 7, 255, 232, 0, 1, 159, 128, 103, 254, 6, 7, 255, 255, 255, 255, 255, 255, 128, 76, 255, 244, 7, 255, 240, 0, 3, 63, 224, 207, 255, 224, 255, 255, 255, 255, 255, 255, 255, 128, 204, 255, 248, 3, 255, 252, 0, 6, 127, 254, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 44, 255, 250, 3, 255, 255, 0, 12, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 172, 255, 250, 1, 255, 255, 224, 25, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 108, 255, 252, 1, 255, 255, 254, 3, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 236, 255, 253, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 28, 255, 254, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 156, 255, 254, 128, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 92, 255, 254, 128, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 220, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 60, 255, 255, 64, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 188, 255, 255, 64, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 124, 255, 255, 64, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 252, 255, 255, 128, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 2, 255, 255, 160, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 130, 255, 255, 160, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 66, 255, 255, 192, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 194, 255, 255, 208, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 34, 255, 255, 241, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 162, 255, 255, 255, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 98, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 226, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 18, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 146, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 82, 255, 255, 255, 255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 210, 255, 255, 255, 255, 255, 250, 127, 255, 255, 255, 255, 224, 63, 255, 255, 255, 255, 255, 255, 128, 50, 255, 255, 239, 255, 255, 240, 63, 255, 255, 255, 255, 128, 255, 255, 255, 255, 255, 255, 255, 128, 178, 255, 255, 167, 255, 255, 240, 31, 255, 255, 255, 254, 0, 15, 255, 255, 255, 255, 255, 255, 128, 114, 255, 255, 3, 255, 255, 248, 15, 255, 255, 255, 252, 128, 7, 255, 255, 255, 255, 255, 255, 128, 242, 255, 255, 1, 255, 255, 248, 15, 247, 255, 255, 252, 0, 7, 255, 255, 255, 255, 255, 255, 128, 10, 255, 255, 0, 255, 255, 236, 7, 215, 255, 255, 252, 0, 31, 255, 255, 255, 255, 255, 255, 128, 138, 255, 255, 128, 255, 255, 224, 7, 149, 255, 255, 252, 0, 63, 255, 255, 255, 255, 255, 255, 128, 74, 255, 254, 128, 255, 255, 240, 3, 128, 251, 255, 248, 0, 63, 255, 255, 255, 255, 255, 255, 128, 202, 255, 254, 0, 127, 255, 248, 1, 128, 195, 255, 250, 0, 7, 255, 255, 255, 255, 255, 255, 128, 42, 255, 254, 0, 127, 255, 250, 0, 192, 194, 255, 250, 1, 255, 255, 255, 255, 255, 255, 255, 128, 170, 255, 255, 0, 127, 255, 252, 0, 0, 16, 125, 2, 0, 255, 255, 255, 255, 255, 255, 255, 128, 106, 255, 255, 128, 127, 255, 254, 0, 64, 0, 124, 10, 1, 255, 255, 255, 255, 255, 255, 255, 128, 234, 253, 255, 160, 127, 255, 255, 0, 64, 0, 120, 0, 0, 255, 255, 255, 255, 255, 255, 255, 128, 26, 245, 255, 160, 63, 255, 255, 64, 0, 0, 248, 0, 0, 255, 255, 255, 255, 255, 255, 255, 128, 154, 229, 127, 160, 63, 255, 255, 128, 32, 0, 248, 0, 0, 127, 255, 255, 255, 255, 255, 255, 128, 90, 224, 63, 160, 63, 255, 127, 160, 0, 0, 120, 0, 0, 31, 255, 255, 255, 255, 255, 255, 128, 218, 224, 63, 192, 63, 252, 135, 192, 0, 0, 112, 0, 0, 31, 255, 255, 255, 255, 255, 255, 128, 58, 224, 63, 208, 31, 250, 21, 208, 0, 0, 244, 0, 0, 31, 255, 255, 255, 255, 255, 255, 128, 186, 192, 63, 208, 31, 240, 1, 224, 0, 0, 52, 0, 0, 15, 255, 255, 255, 255, 255, 255, 128, 122, 208, 62, 144, 31, 244, 0, 104, 0, 0, 16, 0, 0, 31, 255, 255, 255, 255, 255, 255, 128, 250, 208, 30, 0, 31, 224, 0, 48, 0, 0, 16, 0, 0, 15, 255, 255, 255, 255, 255, 255, 128, 6, 208, 28, 0, 31, 224, 0, 52, 0, 0, 8, 0, 0, 15, 255, 255, 255, 255, 255, 255, 128, 134, 208, 28, 0, 31, 192, 0, 20, 0, 0, 0, 2, 0, 3, 255, 255, 255, 255, 255, 255, 128, 70, 224, 12, 0, 15, 192, 0, 56, 0, 0, 2, 0, 0, 7, 255, 255, 255, 255, 255, 255, 128, 198, 232, 12, 0, 15, 128, 0, 58, 0, 0, 0, 0, 0, 1, 255, 255, 255, 255, 255, 255, 128, 38, 232, 8, 0, 15, 0, 0, 28, 0, 0, 0, 0, 48, 2, 255, 255, 255, 255, 255, 255, 128, 166, 240, 8, 0, 15, 0, 0, 29, 0, 0, 0, 0, 32, 1, 255, 255, 255, 255, 255, 255, 128, 102, 244, 0, 0, 14, 1, 0, 13, 1, 0, 0, 0, 96, 0, 127, 255, 255, 255, 255, 255, 128, 230, 244, 0, 0, 14, 0, 64, 14, 0, 0, 0, 1, 140, 0, 255, 255, 255, 255, 255, 255, 128, 22, 244, 0, 0, 6, 2, 64, 6, 128, 128, 0, 1, 62, 0, 127, 255, 255, 255, 255, 255, 128, 150, 248, 0, 0, 4, 0, 144, 6, 128, 0, 0, 136, 126, 0, 127, 255, 255, 255, 255, 255, 128, 86, 250, 0, 0, 4, 0, 128, 2, 128, 64, 0, 249, 255, 0, 127, 255, 255, 255, 255, 255, 128, 214, 250, 0, 0, 4, 1, 128, 1, 0, 64, 96, 127, 255, 0, 127, 255, 255, 255, 255, 255, 128, 54, 252, 0, 0, 4, 0, 0, 1, 64, 0, 126, 63, 255, 128, 255, 255, 255, 255, 255, 255, 128, 182, 253, 0, 0, 2, 0, 0, 7, 64, 32, 127, 255, 255, 160, 127, 255, 255, 255, 255, 255, 128, 118, 253, 0, 0, 2, 0, 0, 7, 64, 32, 127, 255, 255, 226, 127, 255, 255, 255, 255, 255, 128, 246, 253, 0, 0, 0, 0, 2, 3, 128, 34, 127, 255, 255, 254, 127, 255, 255, 255, 255, 255, 128, 14, 254, 0, 8, 6, 0, 4, 249, 160, 34, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 142, 254, 0, 16, 3, 128, 12, 255, 160, 126, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 78, 255, 128, 24, 3, 224, 25, 255, 192, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 206, 255, 160, 26, 7, 248, 35, 255, 240, 127, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 46, 255, 192, 24, 7, 255, 143, 255, 255, 63, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 174, 255, 192, 30, 7, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 110, 255, 192, 31, 227, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 238, 255, 224, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 30, 255, 248, 31, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 158, 255, 255, 159, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 94, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 222, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 62, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 190, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 126, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 129, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 65, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 193, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 33, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 161, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 97, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 225, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 17, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 145, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 81, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 209, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 49, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 177, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 113, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 241, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 9, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 137, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 73, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 201, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 41, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 169, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 105, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 233, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 25, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 153, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 89, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 57, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 185, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 121, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 249, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 5, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 133, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 69, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 197, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 37, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 165, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 101, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 229, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 128, 21, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255];

#[entry]
fn main() -> ! {
    let _core = cortex_m::peripheral::Peripherals::take().unwrap();
    let device = stm32::Peripherals::take().unwrap();

    let rcc_register_block = unsafe { &(*stm32::RCC::ptr()) };

    // Enable clock for SYSCFG
    rcc_register_block
        .apb2enr
        .modify(|_, w| w.syscfgen().set_bit());

    let rcc = device.RCC.constrain();
    let clocks = rcc.cfgr.sysclk(48.mhz()).freeze();

    let mut syscfg = device.SYSCFG;
    let mut exti = device.EXTI;

    let gpioa = device.GPIOA.split();
    let mut user_input = gpioa.pa0.into_floating_input();
    let sck = gpioa.pa5.into_alternate_af5();
    let miso = gpioa.pa6.into_alternate_af5();
    let mosi = gpioa.pa7.into_alternate_af5();

    let mut spi = spi::Spi::spi1(
        device.SPI1,
        (sck, miso, mosi),
        Mode { polarity: IdleLow, phase: CaptureOnFirstTransition },
        Hertz(1_000_000_u32),
        clocks,
    );

    user_input.enable_interrupt(&mut exti);
    user_input.make_interrupt_source(&mut syscfg);
    user_input.trigger_on_edge(&mut exti, gpio::Edge::RISING_FALLING);

    let gpiod = device.GPIOD.split();
    let green_led = gpiod.pd12.into_push_pull_output();

    cortex_m::interrupt::free(|cs| {
        USER_INPUT_MUTEX.borrow(cs).replace(Some(user_input));
        GREEN_LED_MUTEX.borrow(cs).replace(Some(green_led));
    });

    // Enable interrupts
    stm32::NVIC::unpend(interrupt::EXTI0);
    unsafe { stm32::NVIC::unmask(interrupt::EXTI0) }

    loop {
        while !spi.is_txe() {}
        spi.write(&BYTES).unwrap();
    }
}

#[interrupt]
fn EXTI0() {
    cortex_m::interrupt::free(|cs| {
        let mut user_input = USER_INPUT_MUTEX.borrow(cs).borrow_mut();
        let mut green_led = GREEN_LED_MUTEX.borrow(cs).borrow_mut();

        let user_input = user_input.as_mut().unwrap();
        let green_led = green_led.as_mut().unwrap();

        user_input.clear_interrupt_pending_bit();

        if user_input.is_high().unwrap() {
            green_led.set_high().unwrap();
        } else {
            green_led.set_low().unwrap();
        }
    });
}

// #![feature(lang_items)]
// #![allow(dead_code, unused_variables, unused_imports, unused_mut, clippy::missing_safety_doc)]
//
// extern crate alloc;
// use alloc::boxed::Box;
//
// use cortex_m_semihosting::{debug, hprintln};
// use panic_semihosting;
//
// use cortex_m;
// use embedded_hal;
// use rtfm::app;
// use stm32f4xx_hal as hal;
//
// use alloc_cortex_m::CortexMHeap;
//
// #[global_allocator]
// static ALLOCATOR: CortexMHeap = CortexMHeap::empty();
//
// use crate::hal::{gpio, interrupt, prelude::*, spi, stm32, timer};
// use gpio::{ExtiPin, Input, Output};
// use stm32::EXTI;
// use timer::{Event, Timer};
//
// mod graphics;
// use graphics::Display;
//
// type Alternate = gpio::Alternate<gpio::AF5>;
// type SPI = spi::Spi<
//     stm32::SPI1,
//     (
//         gpio::gpioa::PA5<Alternate>,
//         gpio::gpioa::PA6<Alternate>,
//         gpio::gpioa::PA7<Alternate>,
//     ),
// >;
//
// // # Safety - only use on the stm32f407 mcu
// #[app(device = stm32f4xx_hal::stm32, peripherals = true)]
// const APP: () = {
//     struct Resources {
//         exti: EXTI,
//         int1: gpio::gpioe::PE0<Input<gpio::PullDown>>,
//         timer: Timer<stm32::TIM2>,
//
//         user: gpio::gpioa::PA0<Input<gpio::PullDown>>,
//         green: gpio::gpiod::PD12<Output<gpio::PushPull>>,
//         blue: gpio::gpiod::PD15<Output<gpio::PushPull>>,
//
//         spi: SPI,
//         display: Display,
//     }
//
//     #[init]
//     fn init(cx: init::Context) -> init::LateResources {
//         let mut core: cortex_m::Peripherals = cx.core;
//         let device: stm32::Peripherals = cx.device;
//
//         // Initialize the heap
//         let start = cortex_m_rt::heap_start() as usize;
//         let size = 2048;
//         unsafe { ALLOCATOR.init(start, size) };
//
//         // Unsafe usage of RCC_APB2EN register to enable SYSCFGEN clock
//         // Required to configure EXTI0 register
//         let rcc = unsafe { &(*stm32::RCC::ptr()) };
//         rcc.apb2enr.modify(|_, w| w.syscfgen().set_bit());
//
//         // Take the rcc peripheral
//         let rcc = device.RCC.constrain();
//         let clocks = rcc.cfgr.sysclk(28_000_000.hz()).freeze();
//
//         let gpioa = device.GPIOA.split();
//         let user = gpioa.pa0.into_pull_down_input();
//         let sck = gpioa.pa5.into_alternate_af5();
//         let miso = gpioa.pa6.into_alternate_af5();
//         let mosi = gpioa.pa7.into_alternate_af5();
//
//         let pins = (sck, miso, mosi);
//         let spi = spi::Spi::spi1(
//             device.SPI1,
//             pins,
//             embedded_hal::spi::MODE_3,
//             500_000.hz(),
//             clocks,
//         );
//
//         let cs = Box::from(gpioa.pa10.into_push_pull_output());
//         let en = Box::from(gpioa.pa11.into_push_pull_output());
//         let display = Display::new(cs, en);
//
//         let gpiod = device.GPIOD.split();
//         let green = gpiod.pd12.into_push_pull_output();
//         let blue = gpiod.pd15.into_push_pull_output();
//
//         let gpioe = device.GPIOE.split();
//         let mut int1 = gpioe.pe0.into_pull_down_input();
//         let cs = gpioe.pe3.into_push_pull_output();
//
//         let mut syscfg = device.SYSCFG;
//         let mut exti = device.EXTI;
//         let tim2 = device.TIM2;
//
//         int1.make_interrupt_source(&mut syscfg);
//         int1.enable_interrupt(&mut exti);
//         int1.trigger_on_edge(&mut exti, gpio::Edge::RISING);
//
//         let mut tim2 = Timer::tim2(tim2, 30.hz(), clocks);
//         tim2.listen(Event::TimeOut);
//
//         init::LateResources {
//             exti,
//             int1,
//             timer: tim2,
//             user,
//             green,
//             blue,
//             spi,
//             display,
//         }
//     }
//
//     #[task(binds = EXTI0, resources = [exti, int1, blue])]
//     fn exti0(cx: exti0::Context) {
//         let mut exti = cx.resources.exti;
//         let mut int1 = cx.resources.int1;
//         //let mut blue = cx.resources.blue;
//
//         int1.clear_interrupt_pending_bit(&mut exti);
//     }
// //
//     #[task(binds = TIM2, resources = [timer, green])]
//     fn tim2(cx: tim2::Context) {
//         static mut STATE: bool = true;
//
//         let mut timer = cx.resources.timer;
//         let mut green = cx.resources.green;
//
//         timer.clear_interrupt(Event::TimeOut);
//
//         if *STATE {
//             green.set_high().unwrap();
//             *STATE = false;
//         } else {
//             green.set_low().unwrap();
//             *STATE = true;
//         }
//     }
// };
//
// #[lang = "oom"]
// #[no_mangle]
// pub fn rust_oom(_: core::alloc::Layout) -> ! {
//     panic!("OUT OF MEMORY")
// }
